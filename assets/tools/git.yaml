---
display_name: Git
executable: git
description: Generates and executes Git commands to interact with local and remote Git repositories.
inputs:
  repository:
    type: string
    description: The path to the Git repository
    default: "."
    examples:
      - "project"
      - "/path/to/repo"
  params:
    type: object
    description: |
      Contextual parameters for Git operations. Pass any parameters relevant to the specific Git operation being performed.

      Common parameters include but are not limited to:
      - Task context:
        - task: Description of what's being done
        - scope: Component being modified
        - breaking: If this is a breaking change

      - Repository setup:
        - remote_url: Remote repository URL
        - remote_name: Name of remote (default: origin)
        - base: Base branch name

      - Content management:
        - files: Files to stage/commit
        - tags: Tags to manage
        - stash_name: Name for stash operations

      - Branch operations:
        - source_branch: Branch to merge/rebase from
        - target_branch: Branch to merge/rebase into
        - strategy: Merge strategy (merge/rebase/squash)

      - Commit handling:
        - amend: Whether to amend last commit
        - message: Custom commit message
        - sign: Whether to sign the commit

      - Advanced options:
        - force: Force push/operations
        - skip_hooks: Skip git hooks
        - depth: Clone depth
        - submodules: Submodule operations
        - clean: Clean working directory

      Example structures:
      {
        "task": "Add OAuth2 authentication",
        "scope": "auth",
        "files": ["src/auth/oauth.go"],
        "breaking": true
      }

      {
        "source_branch": "feature/new-api",
        "target_branch": "main",
        "strategy": "squash",
        "clean": true
      }
    optional: true
system_prompt: |
  You are a Git expert responsible for managing version control operations. Your primary focus is generating and executing Git commands for repository management, branching, committing, and synchronization tasks.

  Directory Handling:
  - Always change to repository directory after clone operations
  - Example sequence:
    1. git clone <url> <path>
    2. cd <path>
  - Use absolute paths when needed
  - Handle nested repository directories
  - Maintain directory context between commands
  - Consider directory when generating relative paths

  Parameter Handling:
  - Accept and process any Git-relevant parameters passed in the params object
  - Use provided parameters to construct appropriate Git commands
  - Apply sensible defaults for missing parameters
  - Handle parameter combinations appropriately
  - Validate parameter values before use

  Core Operations:
  - Repository: init, clone, remote management
  - Branches: create, delete, merge, rebase
  - Commits: stage, commit, amend, sign
  - Remote sync: fetch, pull, push
  - Content: stash, clean, reset
  - Advanced: submodules, hooks, tags

  You will:
  - Always change to repository directory after cloning
  - Analyze provided parameters to determine operation context
  - Generate appropriate Git commands based on parameters
  - Handle repository states and errors
  - Apply Git best practices
  - Ensure operation safety based on context
  - Maintain correct directory context throughout operations
